<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description/>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>true</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>false</show-in-menu>
 <group-name/>
 <menu-path/>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text>import pya
import math

"""
This sample PCell implements a library called "MyLib" with a single PCell that
draws a circle. It demonstrates the basic implementation techniques for a PCell 
and how to use the "guiding shape" feature to implement a handle for the circle
radius.

Last modified on Dec 3rd 2021
Payman Rasekh, NRC 2021

NOTE: after changing the code, the macro needs to be rerun to install the new
implementation. The macro is also set to "auto run" to install the PCell 
when KLayout is run.
"""

class Taper_Quadratic(pya.PCellDeclarationHelper):
  """
  The PCell declaration for the circle
  """

  def __init__(self):

    # Important: initialize the super class
    super(Taper_Quadratic, self).__init__()

    # declare the parameters
    self.param("l", self.TypeLayer, "Layer", default = pya.LayerInfo(1, 0))
    self.param("length", self.TypeDouble, "Length", default = 10)
    self.param("in_width", self.TypeDouble, "Input Width", default = 1)
    self.param("out_width", self.TypeDouble, "Output Width", default = 2)
    self.param("n", self.TypeInt, "Number of points", default = 64)     
   
    self.param("handle_taper", self.TypeShape, "", default = pya.DPoint(0, 0))
    

    # this hidden parameter is used to determine whether the radius has changed
    # or the "s" handle has been moved
    self.param("length_mem", self.TypeDouble, "MemLength", default = 0.0, hidden = True)
    self.param("in_width_mem", self.TypeDouble, "MemInWidth", default = 0.0, hidden = True)
    self.param("out_width_mem", self.TypeDouble, "MemOutWidth", default = 0.0, hidden = True)

  def display_text_impl(self):
    # Provide a descriptive text for the cell
    return "Quadratic Taper(Layer=" + str(self.l) + ",Length=" + ('%.3f' % self.length) + ")"
  
  def coerce_parameters_impl(self):
  
    # We employ coerce_parameters_impl to decide whether the handle or the 
    # numeric parameter has changed (by comparing against the effective 
    # radius ru) and set ru to the effective radius. We also update the 
    # numerical value or the shape, depending on which on has not changed.
    handle_taper_length = None
    if isinstance(self.handle_taper, pya.DPoint): 
      # compute distance in micron
      handle_taper_length = self.handle_taper.distance(pya.DPoint(0, 0))
    if handle_taper_length != None and abs(self.length-self.length_mem) &lt; 1e-6:
      self.length_mem = handle_taper_length
      self.length = handle_taper_length
    else:
      self.length_mem = self.length
      self.handle_taper = pya.DPoint(self.length, 0)
      
      
      handle_taper_in_width = None
    if isinstance(self.handle_taper, pya.DPoint): 
      # compute distance in micron
      handle_taper_in_width = self.in_width
    if handle_taper_in_width != None and abs(self.in_width-self.in_width_mem) &lt; 1e-6:
      self.in_width_mem = handle_taper_in_width
      self.in_width = handle_taper_in_width
    else:
      self.in_width_mem = self.in_width
      self.handle_taper = pya.DPoint(self.length, 0)
      
      
      handle_taper_out_width = None
    if isinstance(self.handle_taper, pya.DPoint): 
      # compute distance in micron
      handle_taper_out_width = self.out_width
    if handle_taper_out_width != None and abs(self.out_width-self.out_width_mem) &lt; 1e-6:
      self.out_width_mem = handle_taper_out_width
      self.out_width = handle_taper_out_width
    else:
      self.out_width_mem = self.out_width
      self.handle_taper = pya.DPoint(self.length, 0)
      
    
 
    
    # n must be larger or equal than 4
    if self.n &lt;= 4:
      self.n = 4
  
  def can_create_from_shape_impl(self):
    # Implement the "Create PCell from shape" protocol: we can use any shape which 
    # has a finite bounding box
    return self.shape.is_box() or self.shape.is_polygon() or self.shape.is_path()
  
  def parameters_from_shape_impl(self):
    # Implement the "Create PCell from shape" protocol: we set r and l from the shape's 
    # bounding box width and layer
    self.length = self.shape.bbox().width() * self.layout.dbu / 2
    self.l = self.layout.get_info(self.layer)
  
  def transformation_from_shape_impl(self):
    # Implement the "Create PCell from shape" protocol: we use the center of the shape's
    # bounding box to determine the transformation
    return pya.Trans(self.shape.bbox().center())
  
  def produce_impl(self):
  
    # This is the main part of the implementation: create the layout

    # fetch the parameters
    length_mem_dbu = self.length_mem / self.layout.dbu
    
    # compute the Taper
    pts = []
    da = length_mem_dbu / self.n
    for i in range(0, self.n):
      pts.append(pya.Point.new(pya.DPoint(i*da, 0)))
    
    # create the shape
    for i in range(0, self.n, 1):
      self.cell.shapes(self.l_layer).insert(pya.Path(pts[i:i+2],        self.in_width_mem/self.layout.dbu   +    math.sqrt(     i*da*(self.out_width_mem/self.layout.dbu - self.in_width_mem/self.layout.dbu)**2 / length_mem_dbu       )             ))


class MyLib(pya.Library):
  """
  The library where we will put the PCell into 
  """

  def __init__(self):
  
    # Set the description
    self.description = "My First Library"
    
    # Create the PCell declarations
    self.layout().register_pcell("Quadratic Taper", Taper_Quadratic())
    # That would be the place to put in more PCells ...
    
    # Register us with the name "MyLib".
    # If a library with that name already existed, it will be replaced then.
    self.register("MyLib")


# Instantiate and register the library
MyLib()
</text>
</klayout-macro>
